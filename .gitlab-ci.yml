stages:
  - build
  - test
  - deploy

build:server:
  image: node:stretch
  stage: build
  cache: 
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - server/node_modules/
  script:
    - cd server
    - npm i
    - npm run pack
    - mkdir packages
    - cd ..
    - zip -ur server/habitat.zip .ebextensions
    - mv server/habitat.zip server/packages
  artifacts:
    paths:
      - server/packages/habitat.zip
  only:
    changes:
      - server/*

build:client:
  image: node:stretch
  stage: build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - client/node_modules/
  script:
    - cd client
    - npm i
    - npm run build
  only:
    changes:
      - client/*

build:infrastructure:
  image:
    name: hashicorp/terraform:full
    entrypoint: [""]
  stage: build
  script:
    - cd infrastructure/aws
    - terraform init -backend-config="access_key=$AWS_ACCESS_KEY_ID" -backend-config="secret_key=$AWS_SECRET_ACCESS_KEY" -backend-config="region=$AWS_DEFAULT_REGION"
    - terraform plan -out=plan
  artifacts:
    paths:
      - infrastructure/aws/plan
  only:
    changes:
      - infrastructure/*

test:sonar:
  image: node:stretch
  stage: test
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - server/node_modules/
      - client/node_modules/
  script:
    - apt install -y wget unzip
    - mkdir ~/sonarscanner
    - cd ~/sonarscanner
    - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
    - unzip sonar-scanner-cli-3.3.0.1492-linux.zip
    - chmod +x sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner
    - sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner -Dproject.home=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=chris-bosman-github_habitat -Dsonar.projectName=habitat -Dsonar.projectVersion=$SOFTWARE_VERSION.$CI_JOB_ID -Dsonar.sources=server/src -Dsonar.inclusions=client/src -Dsonar.organization=chris-bosman-github -Dsonar.login=$SONAR_API_KEY -Dsonar.projectBaseDir=..

deploy:server:
  image: python:3
  stage: deploy
  before_script:
    - mkdir /home/gitlab
    - cd /home/gitlab
    - pip3 install awscli --upgrade --user
    - pip3 install awsebcli --upgrade --user
    - echo 'export PATH="/home/gitlab/.local/bin:$PATH"' >> ~/.bash_profile && source ~/.bash_profile
  script:
    - aws s3 sync server/packages s3://$AWS_S3_BUCKET/$SOFTWARE_VERSION.$CI_JOB_ID
    - aws s3 cp s3://$AWS_S3_BUCKET/$SOFTWARE_VERSION.$CI_JOB_ID/habitat.zip s3://$AWS_EB_S3_BUCKET/$SOFTWARE_VERSION.$CI_JOB_ID/habitat.zip
    - aws elasticbeanstalk create-application-version --application-name $AWS_EB_APP_NAME --version-label $SOFTWARE_VERSION.$CI_JOB_ID --source-bundle S3Bucket="$AWS_EB_S3_BUCKET",S3Key="$SOFTWARE_VERSION.$CI_JOB_ID/habitat.zip" --auto-create-application
    - eb use $AWS_EB_ENV_NAME
    - eb deploy --version $SOFTWARE_VERSION.$CI_JOB_ID
    - eb setenv DB_PASS=$atlas_pw
    - eb setenv OKTA_CLIENT_ID=$OKTA_CLIENT_ID
    - eb setenv OKTA_JWT_KEY=$OKTA_JWT_KEY
  only:
    refs:
    - master
    changes:
      - server/*
  when: on_success
  dependencies:
    - build:server

deploy:infrastructure:
  image:
    name: hashicorp/terraform:full
    entrypoint: [""]
  stage: deploy
  script:
    - cd infrastructure/aws
    - terraform init -backend-config="access_key=$AWS_ACCESS_KEY_ID" -backend-config="secret_key=$AWS_SECRET_ACCESS_KEY" -backend-config="region=$AWS_DEFAULT_REGION"
    - terraform apply -auto-approve "plan"
  only:
    refs:
    - master
    changes:
      - infrastructure/*
  when: on_success
  dependencies:
    - build:infrastructure