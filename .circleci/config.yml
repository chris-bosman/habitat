version: 2.1

orbs:
  aws-s3: circleci/aws-s3@1.0.9
  aws-cli: circleci/aws-cli@0.1.13
  awsebcli: sbc-orbs/awsebcli@0.0.3

jobs:
  build_client:
    docker:
      - image: circleci/node
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "client/package.json" }}
            - v1-dependencies-
      - run: |
          cd client
          npm run i
          npm run build
      - save_cache:
          paths:
            - ./client/node_modules
          key: v1-dependencies-{{ checksum "client/package.json" }}
      - persist_to_workspace:
          root: ~/repo
          paths:
            - ./client/dist

  build_server:
    docker:
      - image: circleci/node
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "server/package.json" }}
            - v1-dependencies-
      - run: |
          cd server
          npm i
          npm run pack
      - run: |
          cd server
          mkdir packages
          zip -ur habitat.zip ../.ebextensions
          mv habitat.zip packages
      - save_cache:
          paths:
            - ./server/node_modules
          key: v1-dependencies-{{ checksum "server/package.json" }}
      - persist_to_workspace:
          root: ~/repo
          paths:
            - server/packages

  deploy_client:
    docker:
      - image: circleci/node
    working_directory: ~/repo
    steps:
      - checkout
      - run: |
          npm i
          npm run build-client

  upload_server_package:
    docker:
      - image: circleci/python
    working_directory: ~/repo
    steps:
      - checkout
      - run: |
          echo 'export SOFTWARE_VERSION="$SOFTWARE_VERSION" >> $BASH_ENV'
          echo 'export AWS_S3_BUCKET="$AWS_S3_BUCKET" >> $BASH_ENV'
      - attach_workspace:
          at: ~/repo
      - aws-s3/sync:
          from: server/packages
          to: s3://$AWS_S3_BUCKET/$SOFTWARE_VERSION.$CIRCLE_BUILD_NUM
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
          overwrite: false
      - run: |
          echo "$CIRCLE_BUILD_NUM" > build_number
      - persist_to_workspace:
          root: ~/repo
          paths:
            - build_number

  deploy_server:
    docker:
      - image: circleci/python
    working_directory: ~/repo
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
      - awsebcli/install
      - awsebcli/configure:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
      - attach_workspace:
          at: ~/repo
      - run: |
          echo 'export SOFTWARE_VERSION="$SOFTWARE_VERSION" >> $BASH_ENV'
      - aws-s3/copy:
          from: s3://$AWS_S3_BUCKET/$SOFTWARE_VERSION.`cat build_number`/habitat.zip
          to: s3://elasticbeanstalk-us-east-1-836165724612/$SOFTWARE_VERSION.`cat build_number`/habitat.zip
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
      - run: |
          aws elasticbeanstalk create-application-version --application-name habitat-ebapp-prd-eastus --version-label $SOFTWARE_VERSION.`cat build_number` --source-bundle S3Bucket="elasticbeanstalk-us-east-1-836165724612",S3Key="$SOFTWARE_VERSION.`cat build_number`/habitat.zip" --auto-create-application
          eb deploy --version $SOFTWARE_VERSION.`cat build_number`

  test_infrastructure:
    docker:
      - image: hashicorp/terraform:full
    working_directory: ~/repo
    steps:
      - checkout
      - run: |
          cd infrastructure/aws
          terraform init -backend-config="access_key=$AWS_ACCESS_KEY_ID" -backend-config="secret_key=$AWS_SECRET_ACCESS_KEY" -backend-config="region=$AWS_DEFAULT_REGION"
          terraform plan -out=plan
      - persist_to_workspace:
          root: ~/repo
          paths:
            - infrastructure/aws/plan
            - infrastructure/aws/.terraform

  apply_infrastructure:
    docker:
      - image: hashicorp/terraform:full
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run: |
          cd infrastructure/aws
          terraform init -backend-config="access_key=$AWS_ACCESS_KEY_ID" -backend-config="secret_key=$AWS_SECRET_ACCESS_KEY" -backend-config="region=$AWS_DEFAULT_REGION"
          terraform apply -auto-approve "plan"

workflows:
  version: 2
  build-deploy:
    jobs:
      - build_client:
          filters:
            branches:
              ignore: master
      - deploy_client:
          filters:
            branches:
              only: master
      - build_server
      - test_infrastructure:
          context: prd
      - apply_infrastructure:
          context: prd
          requires:
            - test_infrastructure
          filters:
            branches:
              only: master
      - upload_server_package:
          context: prd
          requires:
            - build_server
            - apply_infrastructure
          filters:
            branches:
              only: master
      - deploy_server:
          context: prd
          requires:
            - upload_server_package
          filters:
            branches:
              only: master